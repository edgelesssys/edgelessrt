# Copyright (c) Open Enclave SDK contributors.
# Licensed under the MIT License.
#

---
- set_fact:
    local_lvi_directory: '/usr/local/lvi-mitigation'
    scripts_lvi_directory: '{{ playbook_dir }}/../lvi-mitigation'

- name: Detect currently installed glibc version
  shell: "ldd --version | awk '/ldd/{print $NF}'"
  changed_when: false
  register: glibc_version

- name: Detect currently installed clang
  shell: "which clang-8"
  changed_when: false
  register: clang
  ignore_errors: yes

- name: Detect currently installed clang++-8
  shell: "which clang++-8"
  changed_when: false
  register: clangcpp
  ignore_errors: yes

- name: Detect currently installed gcc
  shell: "which gcc"
  changed_when: false
  register: gcc

- name: Detect currently installed gcpp
  shell: "which g++"
  changed_when: false
  register: gcpp

- name: Creates directories
  file:
    path: '{{ local_lvi_directory }}/bin'
    state: directory

- name: Download as/ld tarball
  get_url:
    url: 'https://download.01.org/intel-sgx/sgx-linux/2.13/as.ld.objdump.gold.r3.tar.gz'
    dest: '/tmp/'
  register: asldobjdump

- name: Extract as and ld binaries
  unarchive:
    src: "{{ asldobjdump.dest }}"
    dest: '{{ local_lvi_directory }}/'
    remote_src: yes

- name: Create symbolic link to as
  file:
    src: '{{ local_lvi_directory }}/external/toolset/ubuntu18.04/as'
    dest: '{{ local_lvi_directory }}/bin/as'
    state: link
    force: yes

- name: Create symbolic link to ld
  file:
    src: '{{ local_lvi_directory }}/external/toolset/ubuntu18.04/ld'
    dest: '{{ local_lvi_directory }}/bin/ld'
    state: link
    force: yes
  when: glibc_version.stdout >= '2.27'

- name: Copy scripts
  copy:
    src: '{{ scripts_lvi_directory }}/'
    dest: '{{ local_lvi_directory }}/bin'
    mode: 'u=rx,g=rx,o=rx'

- name: Create clang-8 wrapper
  shell: "sh {{ local_lvi_directory }}/bin/generate_wrapper --name=clang-8 --path={{ local_lvi_directory }}/bin"
  when: clang.stdout != ""

- name: Create clang++-8 wrapper
  shell: "sh {{ local_lvi_directory }}/bin/generate_wrapper --name=clang++-8 --path={{ local_lvi_directory }}/bin"
  when: clangcpp.stdout != ""

- name: Create symbolic links to clang
  file:
    src: '{{ item.path }}'
    dest: '{{ local_lvi_directory }}/bin/{{ item.dest }}'
    state: link
    force: yes
  with_items:
    - { path: '{{ clang.stdout }}', dest: 'clang-8_symlink' }
    - { path: '{{ clangcpp.stdout }}', dest: 'clang++-8_symlink'}
  when: clang.stdout != "" and clangcpp.stdout != ""

- name: Create gcc wrapper
  shell: "sh {{ local_lvi_directory }}/bin/generate_wrapper --name=gcc --path={{ local_lvi_directory }}/bin"
  when: gcc.stdout != ""

- name: Create g++ wrapper
  shell: "sh {{ local_lvi_directory }}/bin/generate_wrapper --name=g++ --path={{ local_lvi_directory }}/bin"
  when: gcpp.stdout != ""

- name: Create symbolic links to gcc
  file:
    src: '{{ item.path }}'
    dest: '{{ local_lvi_directory }}/bin/{{ item.dest }}'
    state: link
    force: yes
  with_items:
    - { path: '{{ gcc.stdout }}', dest: 'gcc_symlink' }
    - { path: '{{ gcpp.stdout }}', dest: 'g++_symlink' }
  when: gcc.stdout != "" and gcpp.stdout != ""
